# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build and publish images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Frontend
        # ? Kind of optional if static deployment
        uses: docker/build-push-action@v1
        with:
          repository: platyplus/tilehuria
          build_args: HOSTNAME=${{ secrets.HOSTNAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
      - name: Hasura
        uses: docker/build-push-action@v1
        with:
          path: ./hasura
          repository: platyplus/tilehuria-hasura
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
      - name: Hasura Backend Plus
        uses: docker/build-push-action@v1
        with:
          path: ./hasura-backend-plus
          repository: platyplus/tilehuria-hbp
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
      - name: Worker
        uses: docker/build-push-action@v1
        with:
          path: ./worker
          repository: platyplus/tilehuria-worker
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
      - name: Hooks
        uses: docker/build-push-action@v1
        with:
          path: ./hooks
          repository: platyplus/tilehuria-hooks
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
  deploy:
    name: Deploy to K8s
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 'Deploy'
        uses: 'platyplus/helm-gh-action@master'
        with:
          release: tilehuria
          namespace: default
          chart: 'tilehuria'
          repository: 'https://charts.platyplus.io'
          helm: helm3
          timeout: 20m0s
          values: |
            global:
              hostname: ${{ secrets.HOSTNAME }}
            hasura-backend-plus:
              minio:
                accessKey: 
                  password: ${{ secrets.MINIO_ACCESS_KEY }}
                secretKey:
                  password: ${{ secrets.MINIO_SECRET_KEY }}
              hasura:
                postgresql:
                  postgresqlPassword: ${{ secrets.POSTGRES_PASSWORD }}
                adminSecret: ${{ secrets.HASURA_ADMIN_SECRET }}
            rabbitmq:
              auth:
                password: ${{ secrets.RABBITMQ_PASSWORD }}
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
