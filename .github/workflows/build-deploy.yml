# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Build and publish frontend to Docker Hub
      #   # ? Kind of optional if static deployment
      #   uses: docker/build-push-action@v1
      #   with:
      #     repository: platyplus/tilehuria
      #     build_args: HOSTNAME=${{ secrets.HOSTNAME }}
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     tag_with_ref: true
      #     tag_with_sha: true
      # - name: Build and publish Hasura to Docker Hub
      #   uses: docker/build-push-action@v1
      #   with:
      #     path: ./hasura
      #     repository: platyplus/tilehuria-hasura
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     tag_with_ref: true
      #     tag_with_sha: true
      # - name: Build and publish Worker to Docker Hub
      #   uses: docker/build-push-action@v1
      #   with:
      #     path: ./worker
      #     repository: platyplus/tilehuria-worker
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     tag_with_ref: true
      #     tag_with_sha: true
      # - name: Build and publish Hooks to Docker Hub
      #   uses: docker/build-push-action@v1
      #   with:
      #     path: ./hooks
      #     repository: platyplus/tilehuria-hooks
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     tag_with_ref: true
      #     tag_with_sha: true
      - name: Connect to Digital Ocean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save tilehuria
      - name: 'Deploy'
        uses: 'deliverybot/helm@v1'
        with:
          release: 'tilehuria'
          namespace: 'default'
          repository: 'https://charts.platyplus.io'
          chart: 'tilehuria'
          helm: 'helm3'
          token: '${{ github.token }}'
          values: |
            global.hostname: ${{ secrets.HOSTNAME }}
        # env:
        #   KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
